#include <iostream>
using namespace std;

// Base class: Shape
class Shape {
public:
    virtual void display() const = 0; // Pure virtual function
    virtual ~Shape() {}              // Virtual destructor
};

// Rectangle class: Derived from Shape
class Rectangle : public Shape {
protected:
    double length, width; // Length and width of the rectangle

public:
    Rectangle(double l, double w) : length(l), width(w) {}

    void display() const override {
        cout << "Rectangle: length = " << length << ", width = " << width << endl;
    }
};

// Square class: Derived from Rectangle
class Square : public Rectangle {
public:
    Square(double side) : Rectangle(side, side) {}

    void display() const override {
        cout << "Square: side = " << length << endl;
    }
};

int main() {
    // Create and display a Square object
    Square square(5.0);
    square.display();

    // Copy the square directly using the default copy constructor
    Square copiedSquare = square; // Object is directly copied
    copiedSquare.display();

    return 0;
}
